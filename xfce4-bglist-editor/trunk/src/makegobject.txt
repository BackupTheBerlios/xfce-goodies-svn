#!/bin/bash

# GObject template by Yoichi Imai <yoichi@silver-forest.com>
# Use generated source freely.
# Version 1.1
# ChangeLog
# 2004-03-05 1.1
# * set_property/get_property
# * fixed prefix of caster

# set default values
SOFTWARE="Xfce Background List Editor"
COPYRIGHT_HOLDER="Danny Milosavljevic <danny_milo@yahoo.com>"
INCLUDE_FILE="gtk/gtk.h"
YEAR=`date +%Y`
#PREFIX=loqui

GTK_WIDGET_MODE=0
PARENT_CLASS=GObject
PARENT_TYPE=G_TYPE_OBJECT

function show_usage {
    echo "usage: $0 [options] class_name"
    echo "options:"
    echo " -w	          GtkWidget mode."
    echo " -p prefix	   prefix. (default: $PREFIX)"
    echo " -r ParentClass      parent class (default: $PARENT_CLASS)"
    echo " -R PARENT_TYPE      (default: $PARENT_TYPE)"
    echo " -u CamelClassName   (default: converted from name like class_name -> ClassName. you need this to use like GtkCTree, GCClosure, ...)"
    echo " -b obj	      object name (default: last part of class_name, for example name.)"
    echo " -i include file     (default: $INCLUDE_FILE)"
    echo
    echo "$0 -p loqui -u IRCConnection irc_connection -> LoquiIRCConnection"
    exit 1
}

while getopts wp:r:R:u:b:ys:c:i: opt $@
do
  case "${opt}" in
     w) GTK_WIDGET_MODE=1;;
     p) PREFIX=$OPTARG;;
     r) PARENT_CLASS=$OPTARG;;
     R) PARENT_TYPE=$OPTARG;;
     u) CAMEL_CLASS_NAME=$OPTARG;;
     b) OBJECT_NAME=$OPTARG;;
     i) INCLUDE_FILE=$OPTARG;;
     *) show_usage;;
  esac
done
shift `expr $OPTIND - 1`
if [ -z $1 ]; then
  show_usage
fi
CLASS_NAME=$1

LOWER_CLASS_NAME=`echo ${CLASS_NAME} | tr "A-Z" "a-z"`
UPPER_PREFIX=`echo ${PREFIX} | tr "a-z" "A-Z"`
UPPER_PREFIX_UBAR=${PREFIX:+${UPPER_PREFIX}_}
LONG_CLASS_NAME="`echo \"${CLASS_NAME}\" |perl -pe 's/([A-Z])/_\l$1/g;' |sed -e 's;^_;;'`"
#cat data.dat | perl -p -e 's!([A-Z])!_$1!g; $_ = lc; s/^_//'
UPPER_CLASS_NAME=`echo ${LONG_CLASS_NAME} | tr "a-z" "A-Z"`

#echo "${CLASS_NAME} -> ${LONG_CLASS_NAME}"
PREFIX_UBAR=${PREFIX:+${PREFIX}_}
if [ -z "$CAMEL_CLASS_NAME" ]; then
   CAMEL_CLASS_NAME=`echo $CLASS_NAME | perl -pe 's/^(.)/\u$1/; s/_(.)/\u$1/;'`
fi
CAMEL_PREFIX=`echo $PREFIX | perl -pe 's/^(.)/\u$1/;'`
if [ -z "$OBJECT_NAME" ]; then
   OBJECT_NAME=`echo $CLASS_NAME | perl -pe 's/.*_//'`
fi

OBJECT_NAME="a${OBJECT_NAME}"

cat > ${PREFIX_UBAR}${LOWER_CLASS_NAME}.h <<EOF
/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*- */
/*
 * $SOFTWARE
 * Copyright (C) $YEAR $COPYRIGHT_HOLDER
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */
#ifndef __${UPPER_PREFIX_UBAR}${UPPER_CLASS_NAME}_H__
#define __${UPPER_PREFIX_UBAR}${UPPER_CLASS_NAME}_H__

#include <${INCLUDE_FILE}>

G_BEGIN_DECLS

#define ${UPPER_PREFIX_UBAR}TYPE_${UPPER_CLASS_NAME}	         (${PREFIX_UBAR}${LONG_CLASS_NAME}_get_type ())
#define ${UPPER_PREFIX_UBAR}${UPPER_CLASS_NAME}(obj)	         (G_TYPE_CHECK_INSTANCE_CAST ((obj), ${UPPER_PREFIX_UBAR}TYPE_${UPPER_CLASS_NAME}, ${CAMEL_PREFIX}${CAMEL_CLASS_NAME}))
#define ${UPPER_PREFIX_UBAR}${UPPER_CLASS_NAME}_CLASS(klass)	 (G_TYPE_CHECK_CLASS_CAST ((klass), ${UPPER_PREFIX_UBAR}TYPE_${UPPER_CLASS_NAME}, ${CAMEL_PREFIX}${CAMEL_CLASS_NAME}Class))
#define ${UPPER_PREFIX_UBAR}IS_${UPPER_CLASS_NAME}(obj)	      (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ${UPPER_PREFIX_UBAR}TYPE_${UPPER_CLASS_NAME}))
#define ${UPPER_PREFIX_UBAR}IS_${UPPER_CLASS_NAME}_CLASS(klass)      (G_TYPE_CHECK_CLASS_TYPE ((klass), ${UPPER_PREFIX_UBAR}TYPE_${UPPER_CLASS_NAME}))
#define ${UPPER_PREFIX_UBAR}${UPPER_CLASS_NAME}_GET_CLASS(obj)       (G_TYPE_INSTANCE_GET_CLASS ((obj), ${UPPER_PREFIX_UBAR}TYPE_${UPPER_CLASS_NAME}, ${CAMEL_PREFIX}${CAMEL_CLASS_NAME}Class))

typedef struct _${CAMEL_PREFIX}${CAMEL_CLASS_NAME}	    ${CAMEL_PREFIX}${CAMEL_CLASS_NAME};
typedef struct _${CAMEL_PREFIX}${CAMEL_CLASS_NAME}Class       ${CAMEL_PREFIX}${CAMEL_CLASS_NAME}Class;

typedef struct _${CAMEL_PREFIX}${CAMEL_CLASS_NAME}Private     ${CAMEL_PREFIX}${CAMEL_CLASS_NAME}Private;

struct _${CAMEL_PREFIX}${CAMEL_CLASS_NAME}
{
	${PARENT_CLASS} parent;
	
	${CAMEL_PREFIX}${CAMEL_CLASS_NAME}Private *priv;
};

struct _${CAMEL_PREFIX}${CAMEL_CLASS_NAME}Class
{
	${PARENT_CLASS}Class parent_class;
};


GType ${PREFIX_UBAR}${LONG_CLASS_NAME}_get_type(void) G_GNUC_CONST;

EOF


if [ "$GTK_WIDGET_MODE" -eq 1 ]; then
  echo "GtkWidget* ${PREFIX_UBAR}${LONG_CLASS_NAME}_new(void);"
else
  echo "${CAMEL_PREFIX}${CAMEL_CLASS_NAME}* ${PREFIX_UBAR}${LONG_CLASS_NAME}_new(void);"
fi | cat >> ${PREFIX_UBAR}${LOWER_CLASS_NAME}.h

cat >> ${PREFIX_UBAR}${LOWER_CLASS_NAME}.h <<EOF
G_END_DECLS

#endif /* __${UPPER_PREFIX_UBAR}${UPPER_CLASS_NAME}_H__ */
EOF

cat > ${PREFIX_UBAR}${LOWER_CLASS_NAME}.c <<EOF
/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*- */
/*
 * $SOFTWARE
 * Copyright (C) $YEAR $COPYRIGHT_HOLDER
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#include "${PREFIX_UBAR}${LOWER_CLASS_NAME}.h"

enum {
	LAST_SIGNAL
};

enum {
	LAST_PROP
};

struct _${CAMEL_PREFIX}${CAMEL_CLASS_NAME}Private
{
};

static ${PARENT_CLASS}Class *parent_class = NULL;

/* static guint ${PREFIX_UBAR}${CLASS_NAME}_signals[LAST_SIGNAL] = { 0 }; */

static void ${PREFIX_UBAR}${LONG_CLASS_NAME}_class_init(${CAMEL_PREFIX}${CAMEL_CLASS_NAME}Class *klass);
static void ${PREFIX_UBAR}${LONG_CLASS_NAME}_init(${CAMEL_PREFIX}${CAMEL_CLASS_NAME} *${OBJECT_NAME});
static void ${PREFIX_UBAR}${LONG_CLASS_NAME}_finalize(GObject *object);
static void ${PREFIX_UBAR}${LONG_CLASS_NAME}_dispose(GObject *object);

static void ${PREFIX_UBAR}${LONG_CLASS_NAME}_get_property(GObject *object, guint param_id, GValue *value, GParamSpec *pspec);
static void ${PREFIX_UBAR}${LONG_CLASS_NAME}_set_property(GObject *object, guint param_id, const GValue *value, GParamSpec *pspec);

GType
${PREFIX_UBAR}${LONG_CLASS_NAME}_get_type(void)
{
	static GType type = 0;
	if (type == 0) {
		static const GTypeInfo our_info =
			{
				sizeof(${CAMEL_PREFIX}${CAMEL_CLASS_NAME}Class),
				NULL,	   /* base_init */
				NULL,	   /* base_finalize */
				(GClassInitFunc) ${PREFIX_UBAR}${LONG_CLASS_NAME}_class_init,
				NULL,	   /* class_finalize */
				NULL,	   /* class_data */
				sizeof(${CAMEL_PREFIX}${CAMEL_CLASS_NAME}),
				0,	      /* n_preallocs */
				(GInstanceInitFunc) ${PREFIX_UBAR}${LONG_CLASS_NAME}_init
			};
		
		type = g_type_register_static(${PARENT_TYPE},
					      "${CAMEL_PREFIX}${CAMEL_CLASS_NAME}",
					      &our_info,
					      0);
	}
	
	return type;
}
static void 
${PREFIX_UBAR}${LONG_CLASS_NAME}_finalize(GObject *object)
{
	${CAMEL_PREFIX}${CAMEL_CLASS_NAME} *${OBJECT_NAME};

	g_return_if_fail(object != NULL);
	g_return_if_fail(${UPPER_PREFIX_UBAR}IS_${UPPER_CLASS_NAME}(object));

	${OBJECT_NAME} = ${UPPER_PREFIX_UBAR}${UPPER_CLASS_NAME}(object);

	if (G_OBJECT_CLASS(parent_class)->finalize)
	        (* G_OBJECT_CLASS(parent_class)->finalize)(object);

	g_free(${OBJECT_NAME}->priv);
}
static void 
${PREFIX_UBAR}${LONG_CLASS_NAME}_dispose(GObject *object)
{
	${CAMEL_PREFIX}${CAMEL_CLASS_NAME} *${OBJECT_NAME};

	g_return_if_fail(object != NULL);
	g_return_if_fail(${UPPER_PREFIX_UBAR}IS_${UPPER_CLASS_NAME}(object));

	${OBJECT_NAME} = ${UPPER_PREFIX_UBAR}${UPPER_CLASS_NAME}(object);

	if (G_OBJECT_CLASS(parent_class)->dispose)
	        (* G_OBJECT_CLASS(parent_class)->dispose)(object);
}
static void
${PREFIX_UBAR}${LONG_CLASS_NAME}_get_property(GObject *object, guint param_id, GValue *value, GParamSpec *pspec)
{
	${CAMEL_PREFIX}${CAMEL_CLASS_NAME} *${OBJECT_NAME};        

	${OBJECT_NAME} = ${UPPER_PREFIX_UBAR}${UPPER_CLASS_NAME}(object);

	switch (param_id) {
	default:
	        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, param_id, pspec);
	        break;
	}
}
static void
${PREFIX_UBAR}${LONG_CLASS_NAME}_set_property(GObject *object, guint param_id, const GValue *value, GParamSpec *pspec)
{
	${CAMEL_PREFIX}${CAMEL_CLASS_NAME} *${OBJECT_NAME};        

	${OBJECT_NAME} = ${UPPER_PREFIX_UBAR}${UPPER_CLASS_NAME}(object);

	switch (param_id) {
	default:
	        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, param_id, pspec);
	        break;
	}
}

static void
${PREFIX_UBAR}${LONG_CLASS_NAME}_class_init(${CAMEL_PREFIX}${CAMEL_CLASS_NAME}Class *klass)
{
	GObjectClass *object_class = G_OBJECT_CLASS(klass);

	parent_class = g_type_class_peek_parent(klass);
	
	object_class->finalize = ${PREFIX_UBAR}${LONG_CLASS_NAME}_finalize;
	object_class->dispose = ${PREFIX_UBAR}${LONG_CLASS_NAME}_dispose;
	object_class->get_property = ${PREFIX_UBAR}${LONG_CLASS_NAME}_get_property;
	object_class->set_property = ${PREFIX_UBAR}${LONG_CLASS_NAME}_set_property;

}
static void 
${PREFIX_UBAR}${LONG_CLASS_NAME}_init(${CAMEL_PREFIX}${CAMEL_CLASS_NAME} *${OBJECT_NAME})
{
	${CAMEL_PREFIX}${CAMEL_CLASS_NAME}Private *priv;

	priv = g_new0(${CAMEL_PREFIX}${CAMEL_CLASS_NAME}Private, 1);

	${OBJECT_NAME}->priv = priv;
}
EOF

if [ "$GTK_WIDGET_MODE" -eq 1 ] ; then
  cat >> ${PREFIX_UBAR}${LOWER_CLASS_NAME}.c <<EOF 
static void 
${PREFIX_UBAR}${LONG_CLASS_NAME}_destroy(GtkObject *object)
{
	${CAMEL_PREFIX}${CAMEL_CLASS_NAME} *${OBJECT_NAME};

	g_return_if_fail(object != NULL);
	g_return_if_fail(${UPPER_PREFIX_UBAR}IS_${UPPER_CLASS_NAME}(object));

	${OBJECT_NAME} = ${UPPER_PREFIX_UBAR}${UPPER_CLASS_NAME}(object);

	if (GTK_OBJECT_CLASS(parent_class)->destroy)
	        (* GTK_OBJECT_CLASS(parent_class)->destroy)(object);
}
EOF
fi

if [ "$GTK_WIDGET_MODE" -eq 1 ] ; then
 echo 'GtkWidget *'
else
 echo "${CAMEL_PREFIX}${CAMEL_CLASS_NAME}*" 
fi | cat >> ${PREFIX_UBAR}${LOWER_CLASS_NAME}.c

cat >> ${PREFIX_UBAR}${LOWER_CLASS_NAME}.c <<EOF 
${PREFIX_UBAR}${LONG_CLASS_NAME}_new(void)
{
	${CAMEL_PREFIX}${CAMEL_CLASS_NAME} *${OBJECT_NAME};
	${CAMEL_PREFIX}${CAMEL_CLASS_NAME}Private *priv;

	${OBJECT_NAME} = g_object_new(${PREFIX_UBAR}${LONG_CLASS_NAME}_get_type(), NULL);
	
	priv = ${OBJECT_NAME}->priv;

EOF

if [ "$GTK_WIDGET_MODE" -eq 1 ] ; then
 echo "	return GTK_WIDGET(${OBJECT_NAME});"
 echo "}"
else
 echo "	return ${OBJECT_NAME};"
 echo "}"
fi | cat >> ${PREFIX_UBAR}${LOWER_CLASS_NAME}.c
